get.category_analytics = SELECT categories.name as name,count(expenses.name) as count, coalesce(round(SUM(price)::numeric,2),0) as sum from categories \
 left join users_categories on users_categories.category_id= categories.id \
 left join expenses  ON expenses.category_id = categories.id \
 AND (extract(year from date) = :year OR CAST(:year AS int) is null) AND (extract(month from date) = :month OR CAST(:month AS int) is null) \
 where users_categories.user_id= :user_id GROUP BY categories.name,categories.id ORDER BY categories.id
get.most_poular_expenses_analytics = SELECT name, COUNT(name) as count, round(SUM(price)::numeric,2) AS sum \
 FROM expenses WHERE user_id = :user_id AND (CAST(:month AS int) is null OR extract(month from date) = :month) \
 AND (CAST(:year AS int) is null OR extract(year from date) = :year) AND (CAST(:category_id AS int) is null OR category_id = :category_id) \
 GROUP BY name ORDER BY count DESC, sum DESC FETCH FIRST :limit ROW ONLY
get.all_active_years = SELECT DISTINCT(EXTRACT (YEAR FROM date)) as year FROM expenses WHERE user_id = :user_id ORDER BY year DESC
get.month_expenses_analytics = SELECT months.id as id, months.name as name, round(SUM(price)::numeric,2) AS sum \
 FROM expenses RIGHT JOIN months ON EXTRACT(MONTH from date) = months.id AND user_id = :user_id \
 AND (extract(year from date) = :year OR CAST(:year AS int) is null) AND (category_id = :category_id OR CAST(:category_id as int) is null) \
 GROUP BY months.id ORDER BY months.id
 get.month_incomes_analytics = SELECT months.id as id, months.name as name, round(SUM(amount)::numeric,2) AS sum \
 FROM incomes RIGHT JOIN months ON EXTRACT(MONTH from date) = months.id AND user_id = :user_id \
 AND (extract(year from date) = :year OR CAST(:year AS int) is null) \
 GROUP BY months.id ORDER BY months.id
 get.month_balance_analytics = SELECT t_expenses.month_id as id, t_expenses.month_name as name, COALESCE(t_incomes.sum,0) - COALESCE(t_expenses.sum,0) \
  as sum FROM (SELECT months.id as month_id, months.name as month_name, round(SUM(price)::numeric,2) AS sum \
 FROM expenses RIGHT JOIN months ON EXTRACT(MONTH from date) = months.id AND user_id = :user_id \
 AND (extract(year from date) = :year OR CAST(:year AS int) is null) GROUP BY months.id ORDER BY months.id \
 ) t_expenses  JOIN (SELECT months.id as month_id, months.name as month_name, round(SUM(amount)::numeric,2) AS sum \
 FROM incomes RIGHT JOIN months ON EXTRACT(MONTH from date) = months.id AND user_id = :user_id \
 AND (extract(year from date) = :year OR CAST(:year AS int) is null) \
 GROUP BY months.id ORDER BY months.id) t_incomes ON t_expenses.month_id=t_incomes.month_id